<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
</head>

<body>
    <h1>Chat</h1>
    <a href="/profile">Mi perfil</a>
    &nbsp;
    <a href="/products">Ir a productos</a>
    &nbsp;
    <a href="/cart/{{user.cart}}">Ir al carrito</a>
    &nbsp;
    <a href="/api/sessions/logout">Cerrar sesión</a>
    <br>
    <h2>Mensajes:</h2>

    <div>
        <ul id="message-list">
            {{#each messages}}
            <li>
                <strong>{{user}}</strong>: {{message}}
            </li>
            {{/each}}
        </ul>
    </div>
    <div>
        <form id="sendMessageForm">
            <input type="text" id="user" placeholder="Username" required>
            <input type="text" id="message" placeholder="Message" required>
            <button type="submit">Send</button>
        </form>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        console.log(req.user)

        const socket = io();

        // Función para mostrar los mensajes en la página
        const showMessages = (messages) => {
            const messageList = document.getElementById('message-list');
            messageList.innerHTML = '';

            messages.forEach((message) => {
                const messageItem = document.createElement('li');
                messageItem.innerHTML = `
                    <strong>${message.user}</strong>: ${message.message}
                `;
                messageList.appendChild(messageItem);
            });
        };

        // Obtener todos los mensajes al cargar la página
        fetch('/api/messages')
            .then(response => response.json())
            .then(data => {
                showMessages(data.response);
            })
            .catch(error => console.error('Error retrieving messages:', error));

        // Escuchar el evento de actualización de mensajes
        socket.on('messagesUpdate', (messages) => {
            showMessages(messages);
        });

        // Manejar el envío del formulario para enviar un nuevo mensaje
        const sendMessageForm = document.getElementById('sendMessageForm');
        sendMessageForm.addEventListener('submit', (event) => {
            event.preventDefault();
            const user = document.getElementById('user').value;
            const message = document.getElementById('message').value;
            const newMessageData = { user, message };

            fetch('/api/messages', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(newMessageData)
            })
                .then(response => response.json())
                .then(data => {
                    // Limpiar el formulario
                    sendMessageForm.reset();
                })
                .catch(error => console.error('Error sending message:', error));
        });
    </script>
</body>

</html>